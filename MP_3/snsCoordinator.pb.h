// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snsCoordinator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snsCoordinator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snsCoordinator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snsCoordinator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snsCoordinator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snsCoordinator_2eproto;
namespace snsCoordinator {
class ClusterId;
struct ClusterIdDefaultTypeInternal;
extern ClusterIdDefaultTypeInternal _ClusterId_default_instance_;
class FollowSyncs;
struct FollowSyncsDefaultTypeInternal;
extern FollowSyncsDefaultTypeInternal _FollowSyncs_default_instance_;
class Heartbeat;
struct HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class Server;
struct ServerDefaultTypeInternal;
extern ServerDefaultTypeInternal _Server_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class Users;
struct UsersDefaultTypeInternal;
extern UsersDefaultTypeInternal _Users_default_instance_;
}  // namespace snsCoordinator
PROTOBUF_NAMESPACE_OPEN
template<> ::snsCoordinator::ClusterId* Arena::CreateMaybeMessage<::snsCoordinator::ClusterId>(Arena*);
template<> ::snsCoordinator::FollowSyncs* Arena::CreateMaybeMessage<::snsCoordinator::FollowSyncs>(Arena*);
template<> ::snsCoordinator::Heartbeat* Arena::CreateMaybeMessage<::snsCoordinator::Heartbeat>(Arena*);
template<> ::snsCoordinator::Server* Arena::CreateMaybeMessage<::snsCoordinator::Server>(Arena*);
template<> ::snsCoordinator::User* Arena::CreateMaybeMessage<::snsCoordinator::User>(Arena*);
template<> ::snsCoordinator::Users* Arena::CreateMaybeMessage<::snsCoordinator::Users>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace snsCoordinator {

enum ServerType : int {
  MASTER = 0,
  SLAVE = 1,
  SYNC = 2,
  ServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerType_IsValid(int value);
constexpr ServerType ServerType_MIN = MASTER;
constexpr ServerType ServerType_MAX = SYNC;
constexpr int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerType_descriptor();
template<typename T>
inline const std::string& ServerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerType_descriptor(), enum_t_value);
}
inline bool ServerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
// ===================================================================

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snsCoordinator.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit constexpr User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return new User();
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snsCoordinator.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:snsCoordinator.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snsCoordinator_2eproto;
};
// -------------------------------------------------------------------

class ClusterId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snsCoordinator.ClusterId) */ {
 public:
  inline ClusterId() : ClusterId(nullptr) {}
  ~ClusterId() override;
  explicit constexpr ClusterId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClusterId(const ClusterId& from);
  ClusterId(ClusterId&& from) noexcept
    : ClusterId() {
    *this = ::std::move(from);
  }

  inline ClusterId& operator=(const ClusterId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterId& operator=(ClusterId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClusterId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClusterId* internal_default_instance() {
    return reinterpret_cast<const ClusterId*>(
               &_ClusterId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClusterId& a, ClusterId& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterId* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterId* New() const final {
    return new ClusterId();
  }

  ClusterId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClusterId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClusterId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snsCoordinator.ClusterId";
  }
  protected:
  explicit ClusterId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusterFieldNumber = 1,
  };
  // int32 cluster = 1;
  void clear_cluster();
  ::PROTOBUF_NAMESPACE_ID::int32 cluster() const;
  void set_cluster(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cluster() const;
  void _internal_set_cluster(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:snsCoordinator.ClusterId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cluster_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snsCoordinator_2eproto;
};
// -------------------------------------------------------------------

class Server final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snsCoordinator.Server) */ {
 public:
  inline Server() : Server(nullptr) {}
  ~Server() override;
  explicit constexpr Server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Server(const Server& from);
  Server(Server&& from) noexcept
    : Server() {
    *this = ::std::move(from);
  }

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server& operator=(Server&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Server& default_instance() {
    return *internal_default_instance();
  }
  static inline const Server* internal_default_instance() {
    return reinterpret_cast<const Server*>(
               &_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Server& a, Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Server* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server* New() const final {
    return new Server();
  }

  Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Server& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Server& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snsCoordinator.Server";
  }
  protected:
  explicit Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIpFieldNumber = 1,
    kPortNumFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kServerTypeFieldNumber = 4,
    kActiveFieldNumber = 5,
  };
  // string server_ip = 1;
  void clear_server_ip();
  const std::string& server_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // string port_num = 2;
  void clear_port_num();
  const std::string& port_num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_port_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_port_num();
  PROTOBUF_MUST_USE_RESULT std::string* release_port_num();
  void set_allocated_port_num(std::string* port_num);
  private:
  const std::string& _internal_port_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_num(const std::string& value);
  std::string* _internal_mutable_port_num();
  public:

  // int32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .snsCoordinator.ServerType server_type = 4;
  void clear_server_type();
  ::snsCoordinator::ServerType server_type() const;
  void set_server_type(::snsCoordinator::ServerType value);
  private:
  ::snsCoordinator::ServerType _internal_server_type() const;
  void _internal_set_server_type(::snsCoordinator::ServerType value);
  public:

  // bool active = 5;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:snsCoordinator.Server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  int server_type_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snsCoordinator_2eproto;
};
// -------------------------------------------------------------------

class Users final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snsCoordinator.Users) */ {
 public:
  inline Users() : Users(nullptr) {}
  ~Users() override;
  explicit constexpr Users(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Users(const Users& from);
  Users(Users&& from) noexcept
    : Users() {
    *this = ::std::move(from);
  }

  inline Users& operator=(const Users& from) {
    CopyFrom(from);
    return *this;
  }
  inline Users& operator=(Users&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Users& default_instance() {
    return *internal_default_instance();
  }
  static inline const Users* internal_default_instance() {
    return reinterpret_cast<const Users*>(
               &_Users_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Users& a, Users& b) {
    a.Swap(&b);
  }
  inline void Swap(Users* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Users* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Users* New() const final {
    return new Users();
  }

  Users* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Users>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Users& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Users& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Users* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snsCoordinator.Users";
  }
  protected:
  explicit Users(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated int32 users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_users(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_users() const;
  void _internal_add_users(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_users();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 users(int index) const;
  void set_users(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_users(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:snsCoordinator.Users)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > users_;
  mutable std::atomic<int> _users_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snsCoordinator_2eproto;
};
// -------------------------------------------------------------------

class FollowSyncs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snsCoordinator.FollowSyncs) */ {
 public:
  inline FollowSyncs() : FollowSyncs(nullptr) {}
  ~FollowSyncs() override;
  explicit constexpr FollowSyncs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FollowSyncs(const FollowSyncs& from);
  FollowSyncs(FollowSyncs&& from) noexcept
    : FollowSyncs() {
    *this = ::std::move(from);
  }

  inline FollowSyncs& operator=(const FollowSyncs& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowSyncs& operator=(FollowSyncs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FollowSyncs& default_instance() {
    return *internal_default_instance();
  }
  static inline const FollowSyncs* internal_default_instance() {
    return reinterpret_cast<const FollowSyncs*>(
               &_FollowSyncs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FollowSyncs& a, FollowSyncs& b) {
    a.Swap(&b);
  }
  inline void Swap(FollowSyncs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FollowSyncs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FollowSyncs* New() const final {
    return new FollowSyncs();
  }

  FollowSyncs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FollowSyncs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FollowSyncs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FollowSyncs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FollowSyncs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snsCoordinator.FollowSyncs";
  }
  protected:
  explicit FollowSyncs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
    kFollowSyncsFieldNumber = 2,
    kFollowSyncIpFieldNumber = 3,
    kPortNumsFieldNumber = 4,
  };
  // repeated int32 users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_users(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_users() const;
  void _internal_add_users(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_users();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 users(int index) const;
  void set_users(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_users(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_users();

  // repeated int32 follow_syncs = 2;
  int follow_syncs_size() const;
  private:
  int _internal_follow_syncs_size() const;
  public:
  void clear_follow_syncs();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_follow_syncs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_follow_syncs() const;
  void _internal_add_follow_syncs(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_follow_syncs();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 follow_syncs(int index) const;
  void set_follow_syncs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_follow_syncs(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      follow_syncs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_follow_syncs();

  // repeated string follow_sync_ip = 3;
  int follow_sync_ip_size() const;
  private:
  int _internal_follow_sync_ip_size() const;
  public:
  void clear_follow_sync_ip();
  const std::string& follow_sync_ip(int index) const;
  std::string* mutable_follow_sync_ip(int index);
  void set_follow_sync_ip(int index, const std::string& value);
  void set_follow_sync_ip(int index, std::string&& value);
  void set_follow_sync_ip(int index, const char* value);
  void set_follow_sync_ip(int index, const char* value, size_t size);
  std::string* add_follow_sync_ip();
  void add_follow_sync_ip(const std::string& value);
  void add_follow_sync_ip(std::string&& value);
  void add_follow_sync_ip(const char* value);
  void add_follow_sync_ip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& follow_sync_ip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_follow_sync_ip();
  private:
  const std::string& _internal_follow_sync_ip(int index) const;
  std::string* _internal_add_follow_sync_ip();
  public:

  // repeated string port_nums = 4;
  int port_nums_size() const;
  private:
  int _internal_port_nums_size() const;
  public:
  void clear_port_nums();
  const std::string& port_nums(int index) const;
  std::string* mutable_port_nums(int index);
  void set_port_nums(int index, const std::string& value);
  void set_port_nums(int index, std::string&& value);
  void set_port_nums(int index, const char* value);
  void set_port_nums(int index, const char* value, size_t size);
  std::string* add_port_nums();
  void add_port_nums(const std::string& value);
  void add_port_nums(std::string&& value);
  void add_port_nums(const char* value);
  void add_port_nums(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& port_nums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_port_nums();
  private:
  const std::string& _internal_port_nums(int index) const;
  std::string* _internal_add_port_nums();
  public:

  // @@protoc_insertion_point(class_scope:snsCoordinator.FollowSyncs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > users_;
  mutable std::atomic<int> _users_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > follow_syncs_;
  mutable std::atomic<int> _follow_syncs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> follow_sync_ip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> port_nums_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snsCoordinator_2eproto;
};
// -------------------------------------------------------------------

class Heartbeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snsCoordinator.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {}
  ~Heartbeat() override;
  explicit constexpr Heartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const final {
    return new Heartbeat();
  }

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heartbeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Heartbeat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snsCoordinator.Heartbeat";
  }
  protected:
  explicit Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIpFieldNumber = 3,
    kServerPortFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kServerIdFieldNumber = 1,
    kServerTypeFieldNumber = 2,
  };
  // string server_ip = 3;
  void clear_server_ip();
  const std::string& server_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // string server_port = 4;
  void clear_server_port();
  const std::string& server_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_port();
  PROTOBUF_MUST_USE_RESULT std::string* release_server_port();
  void set_allocated_server_port(std::string* server_port);
  private:
  const std::string& _internal_server_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_port(const std::string& value);
  std::string* _internal_mutable_server_port();
  public:

  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .snsCoordinator.ServerType server_type = 2;
  void clear_server_type();
  ::snsCoordinator::ServerType server_type() const;
  void set_server_type(::snsCoordinator::ServerType value);
  private:
  ::snsCoordinator::ServerType _internal_server_type() const;
  void _internal_set_server_type(::snsCoordinator::ServerType value);
  public:

  // @@protoc_insertion_point(class_scope:snsCoordinator.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_port_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  int server_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snsCoordinator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// int32 user_id = 1;
inline void User::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::user_id() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.User.user_id)
  return _internal_user_id();
}
inline void User::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void User::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:snsCoordinator.User.user_id)
}

// -------------------------------------------------------------------

// ClusterId

// int32 cluster = 1;
inline void ClusterId::clear_cluster() {
  cluster_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClusterId::_internal_cluster() const {
  return cluster_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClusterId::cluster() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.ClusterId.cluster)
  return _internal_cluster();
}
inline void ClusterId::_internal_set_cluster(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cluster_ = value;
}
inline void ClusterId::set_cluster(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cluster(value);
  // @@protoc_insertion_point(field_set:snsCoordinator.ClusterId.cluster)
}

// -------------------------------------------------------------------

// Server

// string server_ip = 1;
inline void Server::clear_server_ip() {
  server_ip_.ClearToEmpty();
}
inline const std::string& Server::server_ip() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.Server.server_ip)
  return _internal_server_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Server::set_server_ip(ArgT0&& arg0, ArgT... args) {
 
 server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snsCoordinator.Server.server_ip)
}
inline std::string* Server::mutable_server_ip() {
  std::string* _s = _internal_mutable_server_ip();
  // @@protoc_insertion_point(field_mutable:snsCoordinator.Server.server_ip)
  return _s;
}
inline const std::string& Server::_internal_server_ip() const {
  return server_ip_.Get();
}
inline void Server::_internal_set_server_ip(const std::string& value) {
  
  server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Server::_internal_mutable_server_ip() {
  
  return server_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Server::release_server_ip() {
  // @@protoc_insertion_point(field_release:snsCoordinator.Server.server_ip)
  return server_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Server::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snsCoordinator.Server.server_ip)
}

// string port_num = 2;
inline void Server::clear_port_num() {
  port_num_.ClearToEmpty();
}
inline const std::string& Server::port_num() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.Server.port_num)
  return _internal_port_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Server::set_port_num(ArgT0&& arg0, ArgT... args) {
 
 port_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snsCoordinator.Server.port_num)
}
inline std::string* Server::mutable_port_num() {
  std::string* _s = _internal_mutable_port_num();
  // @@protoc_insertion_point(field_mutable:snsCoordinator.Server.port_num)
  return _s;
}
inline const std::string& Server::_internal_port_num() const {
  return port_num_.Get();
}
inline void Server::_internal_set_port_num(const std::string& value) {
  
  port_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Server::_internal_mutable_port_num() {
  
  return port_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Server::release_port_num() {
  // @@protoc_insertion_point(field_release:snsCoordinator.Server.port_num)
  return port_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Server::set_allocated_port_num(std::string* port_num) {
  if (port_num != nullptr) {
    
  } else {
    
  }
  port_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port_num,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snsCoordinator.Server.port_num)
}

// int32 server_id = 3;
inline void Server::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Server::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Server::server_id() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.Server.server_id)
  return _internal_server_id();
}
inline void Server::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void Server::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:snsCoordinator.Server.server_id)
}

// .snsCoordinator.ServerType server_type = 4;
inline void Server::clear_server_type() {
  server_type_ = 0;
}
inline ::snsCoordinator::ServerType Server::_internal_server_type() const {
  return static_cast< ::snsCoordinator::ServerType >(server_type_);
}
inline ::snsCoordinator::ServerType Server::server_type() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.Server.server_type)
  return _internal_server_type();
}
inline void Server::_internal_set_server_type(::snsCoordinator::ServerType value) {
  
  server_type_ = value;
}
inline void Server::set_server_type(::snsCoordinator::ServerType value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:snsCoordinator.Server.server_type)
}

// bool active = 5;
inline void Server::clear_active() {
  active_ = false;
}
inline bool Server::_internal_active() const {
  return active_;
}
inline bool Server::active() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.Server.active)
  return _internal_active();
}
inline void Server::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void Server::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:snsCoordinator.Server.active)
}

// -------------------------------------------------------------------

// Users

// repeated int32 users = 1;
inline int Users::_internal_users_size() const {
  return users_.size();
}
inline int Users::users_size() const {
  return _internal_users_size();
}
inline void Users::clear_users() {
  users_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Users::_internal_users(int index) const {
  return users_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Users::users(int index) const {
  // @@protoc_insertion_point(field_get:snsCoordinator.Users.users)
  return _internal_users(index);
}
inline void Users::set_users(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  users_.Set(index, value);
  // @@protoc_insertion_point(field_set:snsCoordinator.Users.users)
}
inline void Users::_internal_add_users(::PROTOBUF_NAMESPACE_ID::int32 value) {
  users_.Add(value);
}
inline void Users::add_users(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_users(value);
  // @@protoc_insertion_point(field_add:snsCoordinator.Users.users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Users::_internal_users() const {
  return users_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Users::users() const {
  // @@protoc_insertion_point(field_list:snsCoordinator.Users.users)
  return _internal_users();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Users::_internal_mutable_users() {
  return &users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Users::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:snsCoordinator.Users.users)
  return _internal_mutable_users();
}

// -------------------------------------------------------------------

// FollowSyncs

// repeated int32 users = 1;
inline int FollowSyncs::_internal_users_size() const {
  return users_.size();
}
inline int FollowSyncs::users_size() const {
  return _internal_users_size();
}
inline void FollowSyncs::clear_users() {
  users_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FollowSyncs::_internal_users(int index) const {
  return users_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FollowSyncs::users(int index) const {
  // @@protoc_insertion_point(field_get:snsCoordinator.FollowSyncs.users)
  return _internal_users(index);
}
inline void FollowSyncs::set_users(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  users_.Set(index, value);
  // @@protoc_insertion_point(field_set:snsCoordinator.FollowSyncs.users)
}
inline void FollowSyncs::_internal_add_users(::PROTOBUF_NAMESPACE_ID::int32 value) {
  users_.Add(value);
}
inline void FollowSyncs::add_users(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_users(value);
  // @@protoc_insertion_point(field_add:snsCoordinator.FollowSyncs.users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FollowSyncs::_internal_users() const {
  return users_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FollowSyncs::users() const {
  // @@protoc_insertion_point(field_list:snsCoordinator.FollowSyncs.users)
  return _internal_users();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FollowSyncs::_internal_mutable_users() {
  return &users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FollowSyncs::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:snsCoordinator.FollowSyncs.users)
  return _internal_mutable_users();
}

// repeated int32 follow_syncs = 2;
inline int FollowSyncs::_internal_follow_syncs_size() const {
  return follow_syncs_.size();
}
inline int FollowSyncs::follow_syncs_size() const {
  return _internal_follow_syncs_size();
}
inline void FollowSyncs::clear_follow_syncs() {
  follow_syncs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FollowSyncs::_internal_follow_syncs(int index) const {
  return follow_syncs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FollowSyncs::follow_syncs(int index) const {
  // @@protoc_insertion_point(field_get:snsCoordinator.FollowSyncs.follow_syncs)
  return _internal_follow_syncs(index);
}
inline void FollowSyncs::set_follow_syncs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  follow_syncs_.Set(index, value);
  // @@protoc_insertion_point(field_set:snsCoordinator.FollowSyncs.follow_syncs)
}
inline void FollowSyncs::_internal_add_follow_syncs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  follow_syncs_.Add(value);
}
inline void FollowSyncs::add_follow_syncs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_follow_syncs(value);
  // @@protoc_insertion_point(field_add:snsCoordinator.FollowSyncs.follow_syncs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FollowSyncs::_internal_follow_syncs() const {
  return follow_syncs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FollowSyncs::follow_syncs() const {
  // @@protoc_insertion_point(field_list:snsCoordinator.FollowSyncs.follow_syncs)
  return _internal_follow_syncs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FollowSyncs::_internal_mutable_follow_syncs() {
  return &follow_syncs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FollowSyncs::mutable_follow_syncs() {
  // @@protoc_insertion_point(field_mutable_list:snsCoordinator.FollowSyncs.follow_syncs)
  return _internal_mutable_follow_syncs();
}

// repeated string follow_sync_ip = 3;
inline int FollowSyncs::_internal_follow_sync_ip_size() const {
  return follow_sync_ip_.size();
}
inline int FollowSyncs::follow_sync_ip_size() const {
  return _internal_follow_sync_ip_size();
}
inline void FollowSyncs::clear_follow_sync_ip() {
  follow_sync_ip_.Clear();
}
inline std::string* FollowSyncs::add_follow_sync_ip() {
  std::string* _s = _internal_add_follow_sync_ip();
  // @@protoc_insertion_point(field_add_mutable:snsCoordinator.FollowSyncs.follow_sync_ip)
  return _s;
}
inline const std::string& FollowSyncs::_internal_follow_sync_ip(int index) const {
  return follow_sync_ip_.Get(index);
}
inline const std::string& FollowSyncs::follow_sync_ip(int index) const {
  // @@protoc_insertion_point(field_get:snsCoordinator.FollowSyncs.follow_sync_ip)
  return _internal_follow_sync_ip(index);
}
inline std::string* FollowSyncs::mutable_follow_sync_ip(int index) {
  // @@protoc_insertion_point(field_mutable:snsCoordinator.FollowSyncs.follow_sync_ip)
  return follow_sync_ip_.Mutable(index);
}
inline void FollowSyncs::set_follow_sync_ip(int index, const std::string& value) {
  follow_sync_ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:snsCoordinator.FollowSyncs.follow_sync_ip)
}
inline void FollowSyncs::set_follow_sync_ip(int index, std::string&& value) {
  follow_sync_ip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:snsCoordinator.FollowSyncs.follow_sync_ip)
}
inline void FollowSyncs::set_follow_sync_ip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  follow_sync_ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:snsCoordinator.FollowSyncs.follow_sync_ip)
}
inline void FollowSyncs::set_follow_sync_ip(int index, const char* value, size_t size) {
  follow_sync_ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:snsCoordinator.FollowSyncs.follow_sync_ip)
}
inline std::string* FollowSyncs::_internal_add_follow_sync_ip() {
  return follow_sync_ip_.Add();
}
inline void FollowSyncs::add_follow_sync_ip(const std::string& value) {
  follow_sync_ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:snsCoordinator.FollowSyncs.follow_sync_ip)
}
inline void FollowSyncs::add_follow_sync_ip(std::string&& value) {
  follow_sync_ip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:snsCoordinator.FollowSyncs.follow_sync_ip)
}
inline void FollowSyncs::add_follow_sync_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  follow_sync_ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:snsCoordinator.FollowSyncs.follow_sync_ip)
}
inline void FollowSyncs::add_follow_sync_ip(const char* value, size_t size) {
  follow_sync_ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:snsCoordinator.FollowSyncs.follow_sync_ip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FollowSyncs::follow_sync_ip() const {
  // @@protoc_insertion_point(field_list:snsCoordinator.FollowSyncs.follow_sync_ip)
  return follow_sync_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FollowSyncs::mutable_follow_sync_ip() {
  // @@protoc_insertion_point(field_mutable_list:snsCoordinator.FollowSyncs.follow_sync_ip)
  return &follow_sync_ip_;
}

// repeated string port_nums = 4;
inline int FollowSyncs::_internal_port_nums_size() const {
  return port_nums_.size();
}
inline int FollowSyncs::port_nums_size() const {
  return _internal_port_nums_size();
}
inline void FollowSyncs::clear_port_nums() {
  port_nums_.Clear();
}
inline std::string* FollowSyncs::add_port_nums() {
  std::string* _s = _internal_add_port_nums();
  // @@protoc_insertion_point(field_add_mutable:snsCoordinator.FollowSyncs.port_nums)
  return _s;
}
inline const std::string& FollowSyncs::_internal_port_nums(int index) const {
  return port_nums_.Get(index);
}
inline const std::string& FollowSyncs::port_nums(int index) const {
  // @@protoc_insertion_point(field_get:snsCoordinator.FollowSyncs.port_nums)
  return _internal_port_nums(index);
}
inline std::string* FollowSyncs::mutable_port_nums(int index) {
  // @@protoc_insertion_point(field_mutable:snsCoordinator.FollowSyncs.port_nums)
  return port_nums_.Mutable(index);
}
inline void FollowSyncs::set_port_nums(int index, const std::string& value) {
  port_nums_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:snsCoordinator.FollowSyncs.port_nums)
}
inline void FollowSyncs::set_port_nums(int index, std::string&& value) {
  port_nums_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:snsCoordinator.FollowSyncs.port_nums)
}
inline void FollowSyncs::set_port_nums(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  port_nums_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:snsCoordinator.FollowSyncs.port_nums)
}
inline void FollowSyncs::set_port_nums(int index, const char* value, size_t size) {
  port_nums_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:snsCoordinator.FollowSyncs.port_nums)
}
inline std::string* FollowSyncs::_internal_add_port_nums() {
  return port_nums_.Add();
}
inline void FollowSyncs::add_port_nums(const std::string& value) {
  port_nums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:snsCoordinator.FollowSyncs.port_nums)
}
inline void FollowSyncs::add_port_nums(std::string&& value) {
  port_nums_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:snsCoordinator.FollowSyncs.port_nums)
}
inline void FollowSyncs::add_port_nums(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  port_nums_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:snsCoordinator.FollowSyncs.port_nums)
}
inline void FollowSyncs::add_port_nums(const char* value, size_t size) {
  port_nums_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:snsCoordinator.FollowSyncs.port_nums)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FollowSyncs::port_nums() const {
  // @@protoc_insertion_point(field_list:snsCoordinator.FollowSyncs.port_nums)
  return port_nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FollowSyncs::mutable_port_nums() {
  // @@protoc_insertion_point(field_mutable_list:snsCoordinator.FollowSyncs.port_nums)
  return &port_nums_;
}

// -------------------------------------------------------------------

// Heartbeat

// int32 server_id = 1;
inline void Heartbeat::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heartbeat::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heartbeat::server_id() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.Heartbeat.server_id)
  return _internal_server_id();
}
inline void Heartbeat::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void Heartbeat::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:snsCoordinator.Heartbeat.server_id)
}

// .snsCoordinator.ServerType server_type = 2;
inline void Heartbeat::clear_server_type() {
  server_type_ = 0;
}
inline ::snsCoordinator::ServerType Heartbeat::_internal_server_type() const {
  return static_cast< ::snsCoordinator::ServerType >(server_type_);
}
inline ::snsCoordinator::ServerType Heartbeat::server_type() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.Heartbeat.server_type)
  return _internal_server_type();
}
inline void Heartbeat::_internal_set_server_type(::snsCoordinator::ServerType value) {
  
  server_type_ = value;
}
inline void Heartbeat::set_server_type(::snsCoordinator::ServerType value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:snsCoordinator.Heartbeat.server_type)
}

// string server_ip = 3;
inline void Heartbeat::clear_server_ip() {
  server_ip_.ClearToEmpty();
}
inline const std::string& Heartbeat::server_ip() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.Heartbeat.server_ip)
  return _internal_server_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Heartbeat::set_server_ip(ArgT0&& arg0, ArgT... args) {
 
 server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snsCoordinator.Heartbeat.server_ip)
}
inline std::string* Heartbeat::mutable_server_ip() {
  std::string* _s = _internal_mutable_server_ip();
  // @@protoc_insertion_point(field_mutable:snsCoordinator.Heartbeat.server_ip)
  return _s;
}
inline const std::string& Heartbeat::_internal_server_ip() const {
  return server_ip_.Get();
}
inline void Heartbeat::_internal_set_server_ip(const std::string& value) {
  
  server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Heartbeat::_internal_mutable_server_ip() {
  
  return server_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Heartbeat::release_server_ip() {
  // @@protoc_insertion_point(field_release:snsCoordinator.Heartbeat.server_ip)
  return server_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Heartbeat::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snsCoordinator.Heartbeat.server_ip)
}

// string server_port = 4;
inline void Heartbeat::clear_server_port() {
  server_port_.ClearToEmpty();
}
inline const std::string& Heartbeat::server_port() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.Heartbeat.server_port)
  return _internal_server_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Heartbeat::set_server_port(ArgT0&& arg0, ArgT... args) {
 
 server_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snsCoordinator.Heartbeat.server_port)
}
inline std::string* Heartbeat::mutable_server_port() {
  std::string* _s = _internal_mutable_server_port();
  // @@protoc_insertion_point(field_mutable:snsCoordinator.Heartbeat.server_port)
  return _s;
}
inline const std::string& Heartbeat::_internal_server_port() const {
  return server_port_.Get();
}
inline void Heartbeat::_internal_set_server_port(const std::string& value) {
  
  server_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Heartbeat::_internal_mutable_server_port() {
  
  return server_port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Heartbeat::release_server_port() {
  // @@protoc_insertion_point(field_release:snsCoordinator.Heartbeat.server_port)
  return server_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Heartbeat::set_allocated_server_port(std::string* server_port) {
  if (server_port != nullptr) {
    
  } else {
    
  }
  server_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_port,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snsCoordinator.Heartbeat.server_port)
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool Heartbeat::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Heartbeat::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Heartbeat::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Heartbeat::timestamp() const {
  // @@protoc_insertion_point(field_get:snsCoordinator.Heartbeat.timestamp)
  return _internal_timestamp();
}
inline void Heartbeat::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snsCoordinator.Heartbeat.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Heartbeat::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Heartbeat::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:snsCoordinator.Heartbeat.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Heartbeat::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Heartbeat::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:snsCoordinator.Heartbeat.timestamp)
  return _msg;
}
inline void Heartbeat::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:snsCoordinator.Heartbeat.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace snsCoordinator

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::snsCoordinator::ServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snsCoordinator::ServerType>() {
  return ::snsCoordinator::ServerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snsCoordinator_2eproto
